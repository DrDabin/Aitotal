// ---------------------------------------------------------------------------
#pragma hdrstop
#include "CallbackClasses.h"
#include "PrintFunctions.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)
// ----------------------------------------------------------------------------
#include "Windows/NtCheck.h"

// ---------------------------------------------------------------------------
static HRESULT IsArchiveItemProp(IInArchive* archive, UInt3232 index,
	PROPID propID, bool& result)
{
	NWindows::NCOM::CPropVariant prop;
	RINOK(archive->GetProperty(index, propID, & prop));
	if (prop.vt == VT_BOOL)
		result = VARIANT_BOOLToBool(prop.boolVal);
	else if (prop.vt == VT_EMPTY)
		result = false;
	else
		return E_FAIL;
	return S_OK;
}

// ---------------------------------------------------------------------------
static HRESULT IsArchiveItemFolder(IInArchive* archive, UInt3232 index,
	bool& result)
{
	return IsArchiveItemProp(archive, index, kpidIsDir, result);
}

// ---------------------------------------------------------------------------
// Archive Open callback class
// ---------------------------------------------------------------------------
STDMETHODIMP CArchiveOpenCallback::SetTotal(const UInt64* /* files */ ,
	const UInt64* /* bytes */)
{

	return S_OK;
}

// ---------------------------------------------------------------------------
STDMETHODIMP CArchiveOpenCallback::SetCompleted(const UInt64* /* files */ ,
	const UInt64* /* bytes */)
{
	return S_OK;
}

// ---------------------------------------------------------------------------
STDMETHODIMP CArchiveOpenCallback::CryptoGetTextPassword(BSTR* password) {
	if (!PasswordIsDefined) {
		return E_ABORT;
	}
	return StringToBstr(Password, password);
}

// ---------------------------------------------------------------------------
// Archive Extract callback class
// ---------------------------------------------------------------------------
void CArchiveExtractCallback::Init(IInArchive* archiveHandler, const UString& directoryPath)
{
	NumErrors = 0;
	_archiveHandler = archiveHandler;
	_directoryPath = directoryPath;
	NWindows::NFile::NName::NormalizeDirPathPrefix(_directoryPath);
}

// ---------------------------------------------------------------------------
STDMETHODIMP CArchiveExtractCallback::SetTotal(UInt64 size )
{
	sizeFil = size;//PrintStringExtracting(size);
	return S_OK;
}

// ---------------------------------------------------------------------------
STDMETHODIMP CArchiveExtractCallback::SetCompleted (const UInt64* completeValue)
{

	PrintStringExtractingS(_filePath, (*(completeValue)*100/sizeFil));
	return S_OK;
}

// ---------------------------------------------------------------------------
STDMETHODIMP CArchiveExtractCallback::GetStream(UInt3232 index,
	ISequentialOutStream** outStream, Int3232 askExtractMode)
{
	*outStream = 0;
	_outFileStream.Release();

	{
		// Get Name
		NWindows::NCOM::CPropVariant prop;
		RINOK(_archiveHandler->GetProperty(index, kpidPath, & prop));

		UString fullPath;
		if (prop.vt == VT_EMPTY)
			fullPath = kEmptyFileAlias;
		else {
			if (prop.vt != VT_BSTR)
				return E_FAIL;
			fullPath = prop.bstrVal;
		}
		_filePath = fullPath;
	}

	if (askExtractMode != NArchive::NExtract::NAskMode::kExtract)
		return S_OK;

	{
		// Get Attrib
		NWindows::NCOM::CPropVariant prop;
		RINOK(_archiveHandler->GetProperty(index, kpidAttrib, & prop));
		if (prop.vt == VT_EMPTY)
		{
			_processedFileInfo.Attrib = 0;
			_processedFileInfo.AttribDefined = false;
		}
		else
		{
			if (prop.vt != VT_UI4)
				return E_FAIL;

			_processedFileInfo.Attrib = prop.ulVal;
			_processedFileInfo.AttribDefined = true;
		}
	}

	RINOK(IsArchiveItemFolder(_archiveHandler, index, _processedFileInfo.isDir));

	{
		// Get Modified Time
		NWindows::NCOM::CPropVariant prop;
		RINOK(_archiveHandler->GetProperty(index, kpidMTime, & prop));
		_processedFileInfo.MTimeDefined = false;
		switch (prop.vt)
		{
		   case VT_EMPTY:
			  // _processedFileInfo.MTime = _utcMTimeDefault;
			  break;
		   case VT_FILETIME:
			  _processedFileInfo.MTime = prop.filetime;
			  _processedFileInfo.MTimeDefined = true;
			  break;
		   default:
			  return E_FAIL;
		}

	}
	{
		// Get Size
		NWindows::NCOM::CPropVariant prop;
		RINOK(_archiveHandler->GetProperty(index, kpidSize, & prop));
		 //bool newFileSizeDefined= (prop.vt!= VT_EMPTY);
		// UInt64 newFileSize;
		 //if (newFileSizeDefined)
		 //newFileSize= ConvertPropVariantToUInt64(prop);
	}

	{
		// Create folders for file
		int slashPos = _filePath.ReverseFind(WCHAR_PATH_SEPARATOR);
		if (slashPos >= 0)
			NWindows::NFile::NDirectory::CreateComplexDirectory (_directoryPath + _filePath.Left(slashPos));
	}

	UString fullProcessedPath = _directoryPath + _filePath;
	///PrintString(fullProcessedPath); //выводим полный путь для распаковываемого файла
	_diskFilePath = fullProcessedPath;

	if (_processedFileInfo.isDir)
	{
		NWindows::NFile::NDirectory::CreateComplexDirectory(fullProcessedPath);
	}
	else
	{
		NWindows::NFile::NFind::CFileInfoW fi;
		if (fi.Find(fullProcessedPath))
		{
			if (!NWindows::NFile::NDirectory::DeleteFileAlways(fullProcessedPath))
			{
				PrintString(UString(kCantDeleteOutputFile) + fullProcessedPath);
				return E_ABORT;
			}
		}

		_outFileStreamSpec = new COutFileStream;
		CMyComPtr<ISequentialOutStream>outStreamLoc(_outFileStreamSpec);
		if (!_outFileStreamSpec->Open(fullProcessedPath, CREATE_ALWAYS))
		{
			PrintString((UString)L"can not open output file " + fullProcessedPath);
			return E_ABORT;
		}
		_outFileStream = outStreamLoc;
		*outStream = outStreamLoc.Detach();
	}
	return S_OK;
}

// ---------------------------------------------------------------------------
STDMETHODIMP CArchiveExtractCallback::PrepareOperation(Int3232 askExtractMode)
{
	_extractMode = false;
  switch (askExtractMode)
  {
    case NArchive::NExtract::NAskMode::kExtract:  _extractMode = true; break;
  };
  switch (askExtractMode)
  {
	case NArchive::NExtract::NAskMode::kExtract:  /*PrintString(kExtractingString);*/ break;
	case NArchive::NExtract::NAskMode::kTest:  /*PrintString(kTestingString);*/ break;
	case NArchive::NExtract::NAskMode::kSkip:  /*PrintString(kSkippingString);*/ break;
  };
	PrintStringExtracting(_filePath);
	return S_OK;
}

// ---------------------------------------------------------------------------
STDMETHODIMP CArchiveExtractCallback::SetOperationResult(Int3232 operationResult)
{

	switch (operationResult)
  {
    case NArchive::NExtract::NOperationResult::kOK:
      break;
    default:
    {
	  NumErrors++;
	  //PrintString("  :  ");
	  const char *s = NULL;
	  switch (operationResult)
      {
        case NArchive::NExtract::NOperationResult::kUnsupportedMethod:
		  s = kUnsupportedMethod;
		  break;
		case NArchive::NExtract::NOperationResult::kDataError:
		  s = kDataError;
		  PrintString(L"Error : ");
		  PrintString(s);
		  return E_ABORT;
		  //break;
        case NArchive::NExtract::NOperationResult::kCRCError:
		  s = kCRCFailed;
		  break;
		case NArchive::NExtract::NOperationResult::kUnavailable:
          s = kUnavailableData;
          break;
        case NArchive::NExtract::NOperationResult::kUnexpectedEnd:
          s = kUnexpectedEnd;
          break;
        case NArchive::NExtract::NOperationResult::kDataAfterEnd:
          s = kDataAfterEnd;
          break;
        case NArchive::NExtract::NOperationResult::kIsNotArc:
          s = kIsNotArc;
		  break;
		case NArchive::NExtract::NOperationResult::kHeadersError:
		  s = kHeadersError;
		  break;
		case NArchive::NExtract::NOperationResult::kWrongPassword:
		  s = "pass";
		  break;

	  }
	  if (s)
      {
		PrintString(L"Error : ");
		PrintString(s);
		//return E_ABORT;  //
	  }
      else
      {
		char temp[16];

		ConvertUInt32ToString(operationResult, temp);
		PrintString(L"Error #");
		PrintString(temp);
      }
    }
  }

	if (_outFileStream)
  {
    if (_processedFileInfo.MTimeDefined)
      _outFileStreamSpec->SetMTime(&_processedFileInfo.MTime);
    RINOK(_outFileStreamSpec->Close());
  }
  _outFileStream.Release();
  if (_extractMode && _processedFileInfo.AttribDefined)
	NWindows::NFile::NDirectory::MySetFileAttributes(_diskFilePath, _processedFileInfo.Attrib);
  PrintNewLine();
  return S_OK;
}

// ---------------------------------------------------------------------------
STDMETHODIMP CArchiveExtractCallback::CryptoGetTextPassword(BSTR* password)
{
	if (!PasswordIsDefined)
	{
		PrintError(L"Password is not defined");
		return E_ABORT;
	}
	return StringToBstr(Password, password);
}

// -----------------------------------------------------------------------------
