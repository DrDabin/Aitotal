// ---------------------------------------------------------------------------

#pragma hdrstop

#include "extract.h"
#pragma package(smart_init)

// ---------------------------------------------------------------------------
extern void toLog(const wchar_t* line); // ф-ция логирования из файла формы
//extern void toExtracting(const wchar_t* line);
// ---------------------------------------------------------------------------

#include "CallbackClasses.h"

DEFINE_GUID(CLSID_CFormat7z, 0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00, 0x01,
	0x10, 0x07, 0x00, 0x00);

DEFINE_GUID(CLSID_CFormatZip, 0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00,
	0x01, 0x10, 0x01, 0x00, 0x00);

DEFINE_GUID(CLSID_CFormatRar, 0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00,
	0x01, 0x10, 0x03, 0x00, 0x00);

DEFINE_GUID(CLSID_CFormatRar5, 0x23170F69, 0x40C1, 0x278A, 0x10, 0x00, 0x00,
	0x01, 0x10, 0xCC, 0x00, 0x00);

typedef UINT32(WINAPI* CreateObjectFunc)(const GUID* clsID, const GUID* interfaceID, void** outObject);

const wchar_t DllName[]= L"tools/7z.dll"; //ver 15.8  пари этой версии у меня зависает программа.
//const wchar_t DllName1[]= L"tools/7z1.dll"; // ver 9.38
// ---------------------------------------------------------------------------
 bool extract2( wchar_t* archiv, wchar_t* dir, unsigned int CLSID_CFormat, UnicodeString PatchProgramma)
 {
	NWindows::NDLL::CLibrary lib;
	if (!lib.Load(DllName))
	   {
		  toLog(L"Can not load 7-zip library");
		  return false;
	   }

	CreateObjectFunc createObjectFunc = (CreateObjectFunc)lib.GetProc("CreateObject");

	   if (createObjectFunc == 0)
	   {
		  toLog(L"Can not get CreateObject");
		  return false;
	   }

	UString archiveName = GetUnicodeString(archiv);

	UString pureName, extensionDelimiter, extension;

	NWindows::NFile::NName::SplitNameToPureNameAndExtension(archiveName,
		pureName, extensionDelimiter, extension);

	UString toDir = GetUnicodeString(dir);
	_GUID cid;

	if(CLSID_CFormat == 1)
	   cid = CLSID_CFormat7z;
	if(CLSID_CFormat == 2)
	   cid = CLSID_CFormatZip;
	if(CLSID_CFormat == 3)
	   cid = CLSID_CFormatRar;
	if(CLSID_CFormat == 4)
	   cid = CLSID_CFormatRar5;

	std::auto_ptr<TStringList>Password(new TStringList(NULL));

	Password->Add("virus");
	Password->Add("infected");
	Password->Add("malware");
	Password->Add("AntiSMS.com");
	//const int p_count = 4;
	//UString passwords[p_count] = {L"virus", L"infected", L"malware",L"AntiSMS.com"};
	 if(TFile::Exists(PatchProgramma + "tools\\password.txt"))
	 {
		std::auto_ptr<TStringList>PasswordFile(new TStringList(NULL));


		PasswordFile->LoadFromFile(PatchProgramma + "tools\\password.txt");

		// maxPass ограничение на количество пароля не более 10.
		for(int i=0, maxPass=0; i<PasswordFile->Count; ++i)
		{
		   if(maxPass<10)
		   {
			  if(PasswordFile->Strings[i] !="")
			  {
				 Password->Add(PasswordFile->Strings[i]);
				 ++maxPass;
			  }
		   }
		}
	}

	bool success = false;
	//for (int i = 0; i < p_count; ++i)
	for(int i = 0; i <Password->Count;++i)
	{
		CMyComPtr<IInArchive>archive;

		if (createObjectFunc(&cid, &IID_IInArchive, (void* *)&archive) != S_OK)
		{
			toLog(L"Can not get class object");
			return false;
		}

		CInFileStream* fileSpec = new CInFileStream;
		CMyComPtr<IInStream>file = fileSpec;

		if (!fileSpec->Open(archiveName))
		{
			toLog(L"Can not open archive file");
			delete fileSpec;
			return false;
		}

		// Open

		CArchiveOpenCallback* openCallbackSpec = new CArchiveOpenCallback;
		CMyComPtr<IArchiveOpenCallback>openCallback(openCallbackSpec);
		openCallbackSpec->PasswordIsDefined = false;
		//openCallbackSpec->Password = passwords[i];
		//openCallbackSpec->Password = GetUnicodeString(Password->Strings[i].w_str());
		if (archive->Open(file, 0, openCallback) != S_OK)
		{
			toLog(L"Can not open archive callback");
			continue;
		}

		// End Open

		// Extract

		CArchiveExtractCallback* extractCallbackSpec = new CArchiveExtractCallback;
		CMyComPtr<IArchiveExtractCallback>extractCallback(extractCallbackSpec);
		extractCallbackSpec->Init(archive, toDir);
		extractCallbackSpec->PasswordIsDefined = true;
		extractCallbackSpec->Password = GetUnicodeString(Password->Strings[i].w_str());

		HRESULT result = archive->Extract(NULL, (UInt3232)(Int32)(-1), false, extractCallback);
		if (result != S_OK || extractCallbackSpec->NumErrors)
		{
			toLog(L"Password incorrect.");
			continue;
		}
		else
		{
			success = true;
			delete fileSpec;
			break;
		}
		// End Extract
	}//End for ListPassword

	if (success)
		toLog(L"Success!");
	else
		toLog(L"Error!");

	return success;
 }
