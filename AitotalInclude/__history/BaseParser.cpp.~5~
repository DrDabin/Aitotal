//---------------------------------------------------------------------------
#include <vcl.h>
#include <memory>    //std::auto_prt<>
#include <System.IOUtils.hpp>
#pragma hdrstop

#include "MyInclude/MyStruct.h"
#include "BaseParser.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
void BaseClass::AddBase(MyBase StructBase)
{
   SpisokBase->Add("<MynameFile>" + StructBase.BaseFileName +"</MynameFile>"+
				   "<MyPathFileName>" + StructBase.BasePatchFileName + "</MyPathFileName>"+
				   "<MyMD5>" + StructBase.BaseMD5 + "</MyMD5>"+
				   "<MySHA256>" + StructBase.BaseSHA256 + "</MySHA256>" +
				   "<MySizeFile>" + StructBase.BaseSizeFile + "</MySizeFile>" +
					"<MyDate>" + StructBase.BaseDataProverki +"</MyDate>" +
				   "<MyDetect>" + StructBase.BaseDetect + "</MyDetect>" +
				   "<MyAdress>" + StructBase.BaseAdress +"</MyAdress>" +
				   "<MyPatchFileArchiv>"+StructBase.BasePatchFileArchiv+"<MyPatchFileAchiv>"+
				   "<MYJesson>" + StructBase.BaseJesson+ "</MyJesson>"
   );
}
void BaseClass::SaveToLog(UnicodeString StrokaSave)
{
   //TDirectory::Exists
   if(TFile::Exists(StrokaSave))
   {
	   std::auto_ptr<TStringList>FileSpisokBase(new TStringList(NULL));
	   FileSpisokBase->LoadFromFile(StrokaSave);
	   FileSpisokBase->Add(SpisokBase->Text.Trim());
	   SpisokBase->Text = FileSpisokBase->Text;
	   SpisokBase->SaveToFile(StrokaSave);
   }
   else
	  SpisokBase->SaveToFile(StrokaSave);
}
BaseClass::BaseClass()
{
   SpisokBase =	new TStringList(NULL);
   Posiciya = 0;
}

BaseClass::~BaseClass()
{
	SpisokBase->Clear();
	delete SpisokBase;
}
//ƒобавл€ю и сразже сохран€ю.
void BaseClass::AddSaveTolog(MyBase StructBase, UnicodeString StrokaSave)
{
   AddBase(StructBase);
   SaveToLog(StrokaSave);
}
UnicodeString BaseClass::TexTega(UnicodeString text, UnicodeString beginTeg, UnicodeString endTeg,__int64 Posiciya)
{
	int begin = PosEx(beginTeg,text,Posiciya);
	if (begin == 0)
		return "";
	else
	   begin+= beginTeg.Length();

	int end = PosEx(endTeg,text,begin);
	if(end==0)
	   return "";
	positia = end + endTeg.Length();
	return text.SubString(begin, end - begin);
}
void BaseClass::LogToMyStruct(UnicodeString StrokaSave)
{

}
